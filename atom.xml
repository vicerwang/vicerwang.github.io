<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Vic's Posts]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://fedvic.com/"/>
  <updated>2016-01-31T04:31:45.000Z</updated>
  <id>http://fedvic.com/</id>
  
  <author>
    <name><![CDATA[vic]]></name>
    <email><![CDATA[vic01724@sina.cn]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Gulp中的增量编译]]></title>
    <link href="http://fedvic.com/2016/01/29/gulpIncrementalBuild/"/>
    <id>http://fedvic.com/2016/01/29/gulpIncrementalBuild/</id>
    <published>2016-01-29T03:13:45.000Z</published>
    <updated>2016-01-31T04:31:45.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://gulpjs.com" target="_blank" rel="external">Gulp.js</a>是目前前端非常流行的自动化构建工具，它基于流，代码优于配置，API简单，又有着大量优秀的第三方插件。它的<code>gulp.watch()</code>接口，可以让我们监听文件改动而进行自动构建，但是如果存在耗时的任务或者随着项目的逐渐增大，可能每次构建都要花费很多的时间，那么在Gulp中有什么解决的办法呢？<br><a id="more"></a></p>
<p>其实在Gulp的文档中对于增量编译有推荐下面<a href="https://github.com/gulpjs/gulp#incremental-builds" target="_blank" rel="external">4个插件</a>：</p>
<ul>
<li><a href="https://github.com/sindresorhus/gulp-changed" target="_blank" rel="external">gulp-changed</a> - only pass through changed files</li>
<li><a href="https://github.com/contra/gulp-cached" target="_blank" rel="external">gulp-cached</a> - in-memory file cache, not for operation on sets of files</li>
<li><a href="https://github.com/ahaurw01/gulp-remember" target="_blank" rel="external">gulp-remember</a> - pairs nicely with gulp-cached</li>
<li><a href="https://github.com/tschaub/gulp-newer" target="_blank" rel="external">gulp-newer</a> - pass through newer source files only, supports many:1 source:dest</li>
</ul>
<p>那么他们的具体用法和区别是什么呢？</p>
<h2 id="gulp-cached"><a href="#gulp-cached" class="headerlink" title="gulp-cached"></a><a href="https://github.com/contra/gulp-cached" target="_blank" rel="external">gulp-cached</a></h2><p>gulp-cached可以将第一次传递给它的文件内容保留在内存中，如果之后再次执行task，它会将传递给它的文件和内存中的文件进行比对，如果内容相同，就不再将该文件继续向后传递，从而做到了只对修改过的文件进行增量编译。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>);</span><br><span class="line"><span class="keyword">var</span> cached = <span class="built_in">require</span>(<span class="string">'gulp-cached'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'less'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./src/*.less'</span>)</span><br><span class="line">        .pipe(cached(<span class="string">'less'</span>))</span><br><span class="line">        .pipe(less())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.watch(<span class="string">'src/*.less'</span>, [<span class="string">'less'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>gulp-cached插件还可以接收一个可选的optimizeMemory参数，插件默认会将文件内容保存在内存中，如果将optimizeMemory设置为true，那么会转而将文件的md5值保留在内存中，从而减少对内存的占用，但是另一方面计算md5值也会消耗更多的时间，插件的作者建议在一般情况下，并不需要开启这个功能。</p>
<p>但是，gulp-cached在使用时也有一些限制，比如下面的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> cached = <span class="built_in">require</span>(<span class="string">'gulp-cached'</span>);</span><br><span class="line"><span class="keyword">var</span> remember = <span class="built_in">require</span>(<span class="string">'gulp-remember'</span>);</span><br><span class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>);</span><br><span class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'concat'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./src/*.less'</span>)</span><br><span class="line">        .pipe(cached(<span class="string">'concat'</span>))</span><br><span class="line">        .pipe(less())</span><br><span class="line">        .pipe(remember(<span class="string">'concat'</span>))</span><br><span class="line">        .pipe(concat(<span class="string">'all.css'</span>))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.watch(<span class="string">'src/*.less'</span>, [<span class="string">'concat'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这是一个监听less文件改动并自动编译成css文件后合并的task，考虑一下这种情况，在修改文件a.less后，触发了concat的task，但是由于此时并没有修改文件b.less，所以传递给gulp-concat插件的b.less被gulp-cached过滤掉了，导致最后生成的all.css文件中只有修改后的a.less编译成的内容。那如何解决这个问题呢，此时就需要借助gulp-remember了。</p>
<h2 id="gulp-remember"><a href="#gulp-remember" class="headerlink" title="gulp-remember"></a><a href="https://github.com/ahaurw01/gulp-remember" target="_blank" rel="external">gulp-remember</a></h2><p>gulp-remember同样可以在内存中缓存所有曾经传递给它的文件，但是它和gulp-cached的区别是，在之后的task中，gulp-cached会过滤掉未经修改的文件不再向下传递，而gulp-remember则会将未传递给它的文件进行补足从而能够继续向下传递，因此通过gulp-cached和gulp-remember的结合使用，既能做到只对修改过的文件进行编译，又能做到当相关联的文件任意一个发生改变时，编译所有相关的文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> cached = <span class="built_in">require</span>(<span class="string">'gulp-cached'</span>);</span><br><span class="line"><span class="keyword">var</span> remember = <span class="built_in">require</span>(<span class="string">'gulp-remember'</span>);</span><br><span class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>);</span><br><span class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'concat'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./src/*.less'</span>)</span><br><span class="line">        .pipe(cached(<span class="string">'concat'</span>))</span><br><span class="line">        .pipe(less())</span><br><span class="line">        .pipe(remember(<span class="string">'concat'</span>))</span><br><span class="line">        .pipe(concat(<span class="string">'all.css'</span>))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.watch(<span class="string">'src/*.less'</span>, [<span class="string">'concat'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>由于在第一次合并文件时，gulp-remember已经将传递过来的文件缓存在内存中了，那么即使在后续的task执行中，gulp-cached插件过滤掉了未经修改过的less文件，但是gulp-remember还是能够通过自己的缓存来补全这些缺失的文件，从而做到正确地合并文件。你可能要问了对于这种情况，为什么还要额外引入两个插件，直接监听文件改动重新编译不就好了么？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">'concat'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./src/*.less'</span>)</span><br><span class="line">        .pipe(less())</span><br><span class="line">        .pipe(concat(<span class="string">'all.css'</span>))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>相比上面这种不使用插件方式，gulp-cached和gulp-remember的结合使用还是有一定优势的：<br>gulp-remember缓存的是less文件编译后生成的css文件，这样只有修改了的less文件才需要重新编译成css文件，其他less文件对应的css文件可以直接从gulp-remember的缓存中读取，而不使用插件的方式每次都要重现编译所有的less文件。</p>
<p>另外，不要忘了我们还可以合理的管理两个插件的缓存：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> watcher = gulp.watch(<span class="string">'./src/*.less'</span>, [<span class="string">'concat'</span>]);</span><br><span class="line">    watcher.on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(event.type);</span><br><span class="line">        <span class="keyword">if</span> (event.type === <span class="string">'deleted'</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> cached.caches[<span class="string">'concat'</span>][event.path];</span><br><span class="line">            remember.forget(<span class="string">'concat'</span>, <span class="built_in">require</span>(<span class="string">'gulp-util'</span>).replaceExtension(event.path, <span class="string">'.css'</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="gulp-changed"><a href="#gulp-changed" class="headerlink" title="gulp-changed"></a><a href="https://github.com/sindresorhus/gulp-changed" target="_blank" rel="external">gulp-changed</a></h2><p>gulp-changed插件也能够像gulp-cached插件一样过滤未修改过的文件做到增量编译，不同之处主要在于如何判断文件被修改过，gulp-cached是通过对文件设置缓存来进行比较，而gulp-changed则是通过比较源文件和生成文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> changed = <span class="built_in">require</span>(<span class="string">'gulp-changed'</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"><span class="keyword">var</span> pngquant = <span class="built_in">require</span>(<span class="string">'imagemin-pngquant'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'img'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./src/img/*'</span>)</span><br><span class="line">        .pipe(changed(<span class="string">'./dist/img'</span>))</span><br><span class="line">        .pipe(imagemin(&#123;</span><br><span class="line">            progressive: <span class="literal">true</span>,</span><br><span class="line">            use: [pngquant()]</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./dist/img'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.watch(<span class="string">'src/img/*.png'</span>, [<span class="string">'img'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>由于gulp-changed是比较源文件和生成文件，所以调用插件的时候，要传入生成的位置，一般就是最后<code>gulp.dest()</code>方法要传入的参数。插件默认比较的是文件修改的时间，如果不同，就说明源文件有被修改过。另外可以通过hasChanged参数来使用插件内置的另一种<br>比较方式：<code>changed(&#39;dist&#39;, {hasChanged: changed.compareSha1Digest})</code>，也就是通过计算文件内容的sha1值来比较，一般情况下，生成文件的内容都是不同于源文件的，除非只是简单的拷贝，所以说基本上没什么用，hasChanged参数也支持传入一个函数来进行自定义比较。</p>
<p>在使用gulp-changed插件时有一个需要注意的地方，如果在task中改变了文件的后缀名，那么就需要通过extension参数来指定新的后缀名，否则插件无法找到生成的文件，比较令人遗憾的是，对于这种情况gulp-changed插件不会有任何提示，只是默默的执行了task，但是完全没有起到增量编译的目的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> changed = <span class="built_in">require</span>(<span class="string">'gulp-changed'</span>);</span><br><span class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'less'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./src/*.less'</span>)</span><br><span class="line">        .pipe(changed(<span class="string">'./dist'</span>, &#123;</span><br><span class="line">            extension: <span class="string">'.css'</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(less())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.watch(<span class="string">'src/*.less'</span>, [<span class="string">'less'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="gulp-newer"><a href="#gulp-newer" class="headerlink" title="gulp-newer"></a><a href="https://github.com/tschaub/gulp-newer" target="_blank" rel="external">gulp-newer</a></h2><p>gulp-newer既可以像gulp-cached/gulp-changed那样1对1地进行增量编译，也可以像gulp-cached配合gulp-remember那样多对1地进行增量编译。它实现增量编译的原理和gulp-changed相同，都是通过比较源文件和生成文件，只不过它只支持比较修改时间。</p>
<p>先来看一个1对1进行增量编译的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> newer = <span class="built_in">require</span>(<span class="string">'gulp-newer'</span>);</span><br><span class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'less'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./src/*.less'</span>)</span><br><span class="line">        .pipe(newer(&#123;</span><br><span class="line">            dest: <span class="string">'./dist'</span>,</span><br><span class="line">            ext: <span class="string">'.css'</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(less())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.watch(<span class="string">'src/*.less'</span>, [<span class="string">'less'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>多对1增量编译的例子如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> newer = <span class="built_in">require</span>(<span class="string">'gulp-newer'</span>);</span><br><span class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'less'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./src/*.less'</span>)</span><br><span class="line">        .pipe(newer(<span class="string">'./dist/all.css'</span>))</span><br><span class="line">        .pipe(less())</span><br><span class="line">        .pipe(concat(<span class="string">'all.css'</span>))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.watch(<span class="string">'src/*.less'</span>, [<span class="string">'less'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>我目前的看法是借助gulp-newer进行多对1的增量编译和直接监听文件自动编译的区别并不是很大（它和gulp-cached配合gulp-remember使用还是有区别的，没有办法带来之前说的缓存编译结果的好处），可能唯一的好处就是下面说的这种情况：通过<code>gulp.watch()</code>监听了所有的文件，但是触发task的源文件只有a文件和b文件，那么此时修改不相关的c文件，gulp-newer可以防止重复编译a文件和b文件情况的出现。关于gulp-newer和gulp-changed，你也可以参考下<a href="http://stackoverflow.com/questions/24730215/gulp-newer-vs-gulp-changed" target="_blank" rel="external">Stackoverflow</a>上对他们的比较。</p>
<h2 id="gulp-watch"><a href="#gulp-watch" class="headerlink" title="gulp-watch"></a><a href="https://github.com/floatdrop/gulp-watch" target="_blank" rel="external">gulp-watch</a></h2><p>除了上面介绍的和<code>gulp.watch()</code>配合使用的4个插件外，我们还可以直接借助gulp-watch插件来完成增量编译。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> watch = <span class="built_in">require</span>(<span class="string">'watch'</span>);</span><br><span class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'less'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'watch-less'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./src/*.less'</span>)</span><br><span class="line">        .pipe(watch(<span class="string">'./src/*.less'</span>))</span><br><span class="line">        .pipe(less())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>gulp-watch可以做到和gulp原生API<code>gulp.watch()</code>一样监听文件改动，并且由于它是整个task的一环，因此每次文件改动时，只有这个被改动的文件会被gulp-watch继续向下传递，而且这种写法也更接近于我们使用gulp插件的方式。另外还有的一个好处是执行<code>watch-less</code>task，会自动运行一次编译less的task，而<code>gulp.watch()</code>在启动时，则什么都不会做。不过gulp-watch也有它的限制，无法处理concat这样的task，具体原因可以参考<a href="https://github.com/floatdrop/gulp-watch/issues/6" target="_blank" rel="external">这里</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://gulpjs.com">Gulp.js</a>是目前前端非常流行的自动化构建工具，它基于流，代码优于配置，API简单，又有着大量优秀的第三方插件。它的<code>gulp.watch()</code>接口，可以让我们监听文件改动而进行自动构建，但是如果存在耗时的任务或者随着项目的逐渐增大，可能每次构建都要花费很多的时间，那么在Gulp中有什么解决的办法呢？<br>]]>
    
    </summary>
    
      <category term="gulp" scheme="http://fedvic.com/tags/gulp/"/>
    
      <category term="构建工具" scheme="http://fedvic.com/categories/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从babel编译es6类继承的一个坑说起]]></title>
    <link href="http://fedvic.com/2016/01/15/extendInBabel/"/>
    <id>http://fedvic.com/2016/01/15/extendInBabel/</id>
    <published>2016-01-15T00:42:56.000Z</published>
    <updated>2016-01-15T07:05:10.000Z</updated>
    <content type="html"><![CDATA[<p>在es6发布之前，我相信所有学习javascript中面向对象编程的同学，都会觉得在javascript中实现类啊，实现继承啊特别麻烦，君不见实现继承，就有原型模式，借助构造函数模式，混合模式，寄生模式，寄生混合模式等等，但是好在es6中对这门语言进行了很多扩展，其中就包括类(Class)的概念以及继承实现方式的提出。虽然本质上类仍然是对javascript中传统构造函数的一层包装，但是书写方式变得非常简单而且也不用再考虑什么最佳实践了。但是要想把他们应用在浏览器端，那自然少不了es6伴侣 ── <a href="https://babeljs.io/" target="_blank" rel="external">babel</a>了，那在使用过程中有没有什么坑啊，笔者这里就介绍一个关于前面讲的继承的坑以及顺带讲讲babel中如是何实现继承的。</p>
<a id="more"></a>
<h2 id="u600E_u4E48_u9047_u5230_u7684_u8FD9_u4E2A_u5751"><a href="#u600E_u4E48_u9047_u5230_u7684_u8FD9_u4E2A_u5751" class="headerlink" title="怎么遇到的这个坑"></a>怎么遇到的这个坑</h2><p>前几周在学习<a href="http://facebook.github.io/react/" target="_blank" rel="external">React</a>后，非常喜欢React面向组件自定义标签的开发方式，于是就决定尝试将公司的基础组件用React重写下，而React还支持<a href="http://babeljs.io/blog/2015/06/07/react-on-es6-plus/" target="_blank" rel="external">es6的写法</a>，那就来个React+ES6+Babel吧。比如像下面这样定义个Input组件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Input</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        value: <span class="keyword">this</span>.props.defaultValue</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="title">input</span> &#123;<span class="attribute">...this.props</span>&#125; /&gt;</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">Input</span> /&gt;</span>,</span><br><span class="line">    document.getElementById('example')</span><br><span class="line">);</span></span><br></pre></td></tr></table></figure>
<p>在Chrome，IE11中一切很完美，但是IE10怎么就抛错了：<em>无法获取未定义或 null 引用的属性“defaultValue”</em>？那我们接下来就看看babel中是如何实现继承的。</p>
<h2 id="babel_u4E2D_u5982_u4F55_u5B9E_u73B0_u7684_u7EE7_u627F_uFF1F"><a href="#babel_u4E2D_u5982_u4F55_u5B9E_u73B0_u7684_u7EE7_u627F_uFF1F" class="headerlink" title="babel中如何实现的继承？"></a>babel中如何实现的继承？</h2><p>我们来举一个更简单的es6类继承的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    constructor(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    constructor(name) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name)</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Parent(<span class="string">'vic'</span>).name);</span><br></pre></td></tr></table></figure>
<p>下面是被babel编译之后格式化的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_possibleConstructorReturn</span>(<span class="params">self, call</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!self) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ReferenceError</span>(<span class="string">"this hasn't been initialised - super() hasn't been called"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> call &amp;&amp; (<span class="keyword">typeof</span> call === <span class="string">"object"</span> || <span class="keyword">typeof</span> call === <span class="string">"function"</span>) ? call : self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_inherits</span>(<span class="params">subClass, superClass</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> superClass !== <span class="string">"function"</span> &amp;&amp; superClass !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Super expression must either be null or a function, not "</span> + <span class="keyword">typeof</span> superClass);</span><br><span class="line">    &#125;</span><br><span class="line">    subClass.prototype = <span class="built_in">Object</span>.create(superClass &amp;&amp; superClass.prototype, &#123;</span><br><span class="line">        constructor: &#123;</span><br><span class="line">            value: subClass,</span><br><span class="line">            enumerable: <span class="literal">false</span>,</span><br><span class="line">            writable: <span class="literal">true</span>,</span><br><span class="line">            configurable: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (superClass) <span class="built_in">Object</span>.setPrototypeOf ? <span class="built_in">Object</span>.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span>(<span class="params">instance, Constructor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> Constructor)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Cannot call a class as a function"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Parent = <span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    _classCallCheck(<span class="keyword">this</span>, Parent);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Child = (<span class="function"><span class="keyword">function</span>(<span class="params">_Parent</span>) </span>&#123;</span><br><span class="line">    _inherits(Child, _Parent);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        _classCallCheck(<span class="keyword">this</span>, Child);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> _this = _possibleConstructorReturn(<span class="keyword">this</span>, <span class="built_in">Object</span>.getPrototypeOf(Child).call(<span class="keyword">this</span>, name));</span><br><span class="line"></span><br><span class="line">        _this.age = age;</span><br><span class="line">        <span class="keyword">return</span> _this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Child;</span><br><span class="line">&#125;)(Parent);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Parent(<span class="string">'vic'</span>).name);</span><br></pre></td></tr></table></figure>
<h3 id="Object-create_28_29"><a href="#Object-create_28_29" class="headerlink" title="Object.create()"></a>Object.create()</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">subClass.prototype = <span class="built_in">Object</span>.create(superClass &amp;&amp; superClass.prototype, &#123;</span><br><span class="line">    constructor: &#123;</span><br><span class="line">        value: subClass,</span><br><span class="line">        enumerable: <span class="literal">false</span>,</span><br><span class="line">        writable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>_inherits()</code>方法接收子类构造函数，父类构造函数两个参数，首先通过<code>Object.create()</code>方法以父类构造函数的原型为原型创建对象，并用它重写子类的原型来实现原型继承，为什么不用经典的原型继承方式<code>subClass.prototype = new superClass()</code>？<br></p>
<p>对javascript中面向对象编程有一定了解的人都知道，这种方式会多执行一遍父类的构造函数，并且会在子类的原型上多定义一组父类对象的实例属性，在es3中可以借助寄生式(parasitic)继承的方式解决：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">obj</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    F.prototype = obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype = obj(Parent.prototype);</span><br></pre></td></tr></table></figure>
<p>原理就是借助一个空构造函数来实现干净的原型继承，而在es5中对以某个对象作为原型创建新对象的这种方法进行了规范，那就是<code>Object.create()</code>。<br></p>
<h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>我们发现babel在调用这个方法的时候，还传入了第二个参数，一个表示多个属性描述器(property descriptor)的对象，它又是用来做什么的呢？经典的原型继承方式，还有一个问题就是重写子类原型后，子类原型指向构造函数的指针(constructor)指向了父类的构造函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Child.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Child().construcotr); <span class="comment">// Parent</span></span><br></pre></td></tr></table></figure>
<p>解决的办法倒也很简单，重新指回去就行了：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Child.prototype.constructor = Child;</span><br></pre></td></tr></table></figure>
<p>但是这又带来了一个新的问题，那就是<code>constructor</code>原本是不可枚举的属性（属性的enumerable为fasle），在<code>for in</code>或者<code>Object.keys()</code>中是无法遍历出来的，但是如果直接对<code>constructor</code>赋值的话，就会让它重新变成一个可枚举的属性，在ES5中可以通过传入属性描述的方式解决：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(Child.prototype, <span class="string">'constructor'</span>, &#123;</span><br><span class="line">     value: Child,</span><br><span class="line">     enumerable: <span class="literal">false</span>,</span><br><span class="line">     writable: <span class="literal">true</span>,</span><br><span class="line">     configurable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>当然了我们也可以像babel那样直接通过<code>Object.create()</code>一步完成原型继承，传入的第二个参数是类似于<code>Object.defineProperties()</code>方法中传入的对象参数，它们也会成为新建对象的原型属性：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Child.prototype = <span class="built_in">Object</span>.create(Parent.prototype, &#123;</span><br><span class="line">    constructor: &#123;</span><br><span class="line">        value: subClass,</span><br><span class="line">        enumerable: <span class="literal">false</span>,</span><br><span class="line">        writable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="getPrototypeOf_28_29/setPrototypeOf_28_29"><a href="#getPrototypeOf_28_29/setPrototypeOf_28_29" class="headerlink" title="getPrototypeOf()/setPrototypeOf()"></a>getPrototypeOf()/setPrototypeOf()</h3><p>了解javascript面向对象的人都知道实现了原型继承其实只实现了继承的一部分，原型继承一般只是用来继承父类的方法，父类的属性则往往需要子类重新声明，一般都是通过借助构造函数或者称之为对象冒充的方式解决：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="keyword">this</span>, name);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们再来看看babel中对此的实现</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// _inherits()方法中</span></span><br><span class="line"><span class="keyword">if</span> (superClass) <span class="built_in">Object</span>.setPrototypeOf ? <span class="built_in">Object</span>.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child构造函数中</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(Child).call(<span class="keyword">this</span>, name)</span><br></pre></td></tr></table></figure>
<p>看起来要比刚才讲的借助构造函数实现复杂点，首先让我们来看下两个核心的方法， <code>getPrototypeOf()</code>是es5提出的用于获取一个对象原型对象的方法，<code>setPrototypeOf()</code>则是es6提出的用于设置一个对象原型对象的方法，因此上面的代码就表示我们将父类和子类的构造函数当作对象来处理，先让父类的构造函数成为子类构造函数的原型，再取得子类构造函数的原型，那不就是父类的构造函数么，也就是说绕了一个圈，和<code>Parent.call(this, name);</code>一个道理啊，那babel为什么要这么实现呢，而且这个实现还带来了我所说的那个坑。<br></p>
<p>先来看看为什么要这么实现，在es6中规定了类静态方法的实现，而静态属性也作为es7的一个提案得到了babel的支持，具体如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    static prop = <span class="string">'value'</span>;</span><br><span class="line">    static method() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并且静态属性和静态方法，是可以被子类继承的，babel为了实现这个继承，才让父类的构造函数设置为子类构造函数的原型，换句话说就是实现了子类构造函数对父类构造函数的继承，从而让子类也能获得父类的静态属性和方法。<br><br>为什么说这又是坑之所在呢，如前面所说<code>getPrototypeOf()</code>是ES5提出的方法，浏览器大多都对其进行了很好的支持(IE9+/Chrome/Firefox)，但是<code>setPrototypeOf()</code>则是在ES6中才提出的方法，IE在IE11时才开始支持这个方法，那意味着在IE10，IE9中根本不存在这个方法，就会执行<code>subClass.__proto__ = superClass;</code>这段代码，同样的<code>__proto__</code>也是在IE11才开始支持，所以这段代码在IE10以下的版本并没有什么用。那<code>Object.getPrototypeOf(Child)</code>获得结果是什么呢，就是<code>Function.prototype</code>，我们知道函数也是实例，函数实例的构造函数就是<code>Function</code>，那自然函数实例的原型就是<code>Function.prototype</code>了，显然不能通过它来执行父类<code>Parent</code>的构造函数，那么通过它构建的子类对象，也就自然不会有父类的实例属性<code>name</code>。回到最开始的React例子，在React es6的写法中，通过<code>state = {};</code>来声明实例属性<code>state</code>，babel编译后的代码大致如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Input</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    _inherits(Input, React.Component);</span><br><span class="line">    <span class="built_in">Object</span>.getPrototypeOf(Input).call(<span class="keyword">this</span>, props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">        value: <span class="keyword">this</span>.props.defaultValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在IE10-中，就如前面说的<code>Object.getPrototypeOf(Input)</code>并没有得到父类的构造函数<code>React.Component</code>，而只是得到了函数实例真正的原型，对其进行对象冒充，不能复制父类的实例属性<code>props</code>，从而在下面调用<code>this.props.defaultValue</code>时报错。</p>
<h2 id="u600E_u4E48_u89E3_u51B3"><a href="#u600E_u4E48_u89E3_u51B3" class="headerlink" title="怎么解决"></a>怎么解决</h2><p>添加一个polyfill解决</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(<span class="built_in">Object</span>.setPrototypeOf || &#123;&#125;.__proto__)) &#123;</span><br><span class="line">    <span class="keyword">var</span> nativeGetPrototypeOf = <span class="built_in">Object</span>.getPrototypeOf;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.getPrototypeOf = <span class="function"><span class="keyword">function</span>(<span class="params">object</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (object.__proto__) &#123;</span><br><span class="line">            <span class="keyword">return</span> object.__proto__;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> nativeGetPrototypeOf.call(<span class="built_in">Object</span>, object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>虽然在IE10-中不存在<code>Object.setPrototypeOf()</code>方法，但是babel会设置子类构造函数的<code>__proto__</code>为父类构造函数，那么就可以在垫片中重写<code>Object.getPrototypeOf()</code>，如果传入对象的<code>__proto__</code>属性存在，那么就返回<code>__proto__</code>属性，也就是父类构造函数。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在es6发布之前，我相信所有学习javascript中面向对象编程的同学，都会觉得在javascript中实现类啊，实现继承啊特别麻烦，君不见实现继承，就有原型模式，借助构造函数模式，混合模式，寄生模式，寄生混合模式等等，但是好在es6中对这门语言进行了很多扩展，其中就包括类(Class)的概念以及继承实现方式的提出。虽然本质上类仍然是对javascript中传统构造函数的一层包装，但是书写方式变得非常简单而且也不用再考虑什么最佳实践了。但是要想把他们应用在浏览器端，那自然少不了es6伴侣 ── <a href="https://babeljs.io/">babel</a>了，那在使用过程中有没有什么坑啊，笔者这里就介绍一个关于前面讲的继承的坑以及顺带讲讲babel中如是何实现继承的。</p>]]>
    
    </summary>
    
      <category term="ES6" scheme="http://fedvic.com/tags/ES6/"/>
    
      <category term="babel" scheme="http://fedvic.com/tags/babel/"/>
    
      <category term="class extends" scheme="http://fedvic.com/tags/class-extends/"/>
    
      <category term="ES6" scheme="http://fedvic.com/categories/ES6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在sublime中编译ES6语法]]></title>
    <link href="http://fedvic.com/2015/12/24/es6InSublime/"/>
    <id>http://fedvic.com/2015/12/24/es6InSublime/</id>
    <published>2015-12-24T07:25:29.000Z</published>
    <updated>2015-12-25T11:24:41.000Z</updated>
    <content type="html"><![CDATA[<p>ECMAScript 6是JavaScript语言的下一代标准，已经在2015年6月正式发布了。那么我们如何学习测试ES6新提出的那些特性呢，是写一个带有javascript的html文件在浏览器里运行下或者在浏览器的控制台输入js代码么？显然不靠谱啊，浏览器对新标准的支持总是滞后的。我知道，你想说还有node，babel呢，但是通过终端的REPL或者执行babel的编译命令查看运行结果，还是很麻烦嘛，还好，我们还可以通过sublime打造我们的js编译运行环境。</p>
<a id="more"></a>
<p>在sublime里直接编译运行某种语言主要是通过为sublime添加相应的的Build System实现的。而目前能够支持编译运行es6语法的也就node了，具体步骤如下。</p>
<p>1.Tools &gt; Build System &gt; New Build System<br>2.在打开的文件中添加如下代码<br>    <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "<span class="attribute">path</span>": <span class="value"><span class="string">"/Users/vic/.nvm/versions/node/v5.3.0/bin"</span></span>,</span><br><span class="line">    "<span class="attribute">working_dir</span>": <span class="value"><span class="string">"$&#123;project_path:$&#123;folder&#125;&#125;"</span></span>,</span><br><span class="line">    "<span class="attribute">selector</span>": <span class="value"><span class="string">"source.js"</span></span>,</span><br><span class="line">    "<span class="attribute">encoding</span>": <span class="value"><span class="string">"utf-8"</span></span>,</span><br><span class="line">    "<span class="attribute">shell</span>": <span class="value"><span class="literal">true</span></span>,</span><br><span class="line">    "<span class="attribute">windows</span>": <span class="value">&#123;</span><br><span class="line">        "<span class="attribute">cmd</span>": <span class="value">[<span class="string">"taskkill /f /im node.exe &gt;nul 2&gt;nul &amp; node $file"</span>]</span><br><span class="line">    </span>&#125;</span>,</span><br><span class="line">    "<span class="attribute">osx</span>": <span class="value">&#123;</span><br><span class="line">        "<span class="attribute">cmd</span>": <span class="value">[<span class="string">"killall node &gt;/dev/null 2&gt;&amp;1; node $file"</span>]</span><br><span class="line">    </span>&#125;</span>,</span><br><span class="line">    "<span class="attribute">linux</span>": <span class="value">&#123;</span><br><span class="line">        "<span class="attribute">cmd</span>": <span class="value">[<span class="string">"killall node &gt;/dev/null 2&gt;&amp;1; node $file"</span>]</span><br><span class="line">    </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>3.通过<code>which node</code>命令获取node的安装目录，添加到对应的path属性上<br>4.保存为<code>node.sublime-build</code><br>5.Tools &gt; Build System，选择刚才创建的<code>node</code><br>6.打开js文件，<code>cmd</code> + <code>b</code></p>
<p>这样我们就可以编译有es6语法的js文件了，但是还有一个问题，不同的node版本对es6语法的支持程度并不一样，当然了，版本越高，支持程度越好，一个查看你当前node版本对es6语法支持程度的办法就是运行阮一峰老师的<a href="https://github.com/ruanyf/es-checker" target="_blank" rel="external">es-checker</a>，全局安装后，执行<br><code>es-checker</code>命令。此文写作时Node最新稳定版本为v5.3.0，在该版本下执行<code>es-checker</code>命令后，控制台输出部分如下图所示：<br><img src="/images/es6InSublime/1.png" alt=""></p>
<p>我们发现即使是目前最新版本的Node对es6语法的支持依然有限。当然了node一直都是有所保留的，通过harmony相关的参数，我们能够开启node对更多es6语法的支持，以v5.3.0版本为例，如下图所示：<br><img src="/images/es6InSublime/2.png" alt=""></p>
<p>也就是，当我们通过<code>node --harmony</code>编译运行js代码的时候，node会开启目前所有完成的es6特性（不包括标注有in porgress的特性）。</p>
<p>如果你想在sublime中编译js时开启这些harmony特性，以osx为例有两个办法：</p>
<ol>
<li><p>在上文的Build System文件中将osx属性的值修改成如下所示</p>
 <figure class="highlight"><table><tr><td class="code"><pre><span class="line">"osx": &#123;</span><br><span class="line">    "cmd": ["killall node &gt;/dev/null 2&gt;&amp;1; node --harmony $file"]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>在shell脚本的配置文件(.bashrc/.zshrc)中为node命令设置别名，添加如下代码</p>
 <figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">alias <span class="keyword">node</span><span class="identifier"></span><span class="title">='node</span> --harmony'</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>但是，即便是为node开启了harmony，依然存在大量得不到支持的es6新特性，这时候就轮到<a href="https://github.com/babel/babel" target="_blank" rel="external">babel</a>登场了。</p>
<p>babel原名6to5，以前的名字听起来是很low，但是也很直观，它就是用来将目前运行环境还不支持的es6语法编译成es5语法的工具。babel目前最新版本为6.x，和之前的5.x版本还是有很大区别的，简单来说就是将命令行和API彻底分离，要想完成对es6语法的编译工作，需要额外通过.babelrc文件的preset和plugin属性指定相应的插件，具体可以参考<a href="https://cnodejs.org/topic/56460e0d89b4b49902e7fbd3" target="_blank" rel="external">这里</a>。</p>
<p>这里我们只说和sublime中编译运行js相关的事情，如果你目前刚好使用的是babel5.x，那么恭喜你省了很多事。我们像刚才那样新建一个Build System，不过这次它执行的不再是node命令，而是babel-node，具体步骤如下：</p>
<p>1.Tools &gt; Build System &gt; New Build System<br>2.在打开的文件中添加如下代码<br>    <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "<span class="attribute">path</span>": <span class="value"><span class="string">"/Users/wangjinliang/.nvm/versions/node/v5.3.2/bin"</span></span>,</span><br><span class="line">    "<span class="attribute">working_dir</span>": <span class="value"><span class="string">"$&#123;project_path:$&#123;folder&#125;&#125;"</span></span>,</span><br><span class="line">    "<span class="attribute">selector</span>": <span class="value"><span class="string">"source.js"</span></span>,</span><br><span class="line">    "<span class="attribute">encoding</span>": <span class="value"><span class="string">"utf-8"</span></span>,</span><br><span class="line">    "<span class="attribute">shell</span>": <span class="value"><span class="literal">true</span></span>,</span><br><span class="line">    "<span class="attribute">windows</span>": <span class="value">&#123;</span><br><span class="line">        "<span class="attribute">cmd</span>": <span class="value">[<span class="string">"taskkill /f /im node.exe &gt;nul 2&gt;nul &amp; babel-node $file"</span>]</span><br><span class="line">    </span>&#125;</span>,</span><br><span class="line">    "<span class="attribute">osx</span>": <span class="value">&#123;</span><br><span class="line">        "<span class="attribute">cmd</span>": <span class="value">[<span class="string">"killall node &gt;/dev/null 2&gt;&amp;1; babel-node $file"</span>]</span><br><span class="line">    </span>&#125;</span>,</span><br><span class="line">    "<span class="attribute">linux</span>": <span class="value">&#123;</span><br><span class="line">        "<span class="attribute">cmd</span>": <span class="value">[<span class="string">"killall node &gt;/dev/null 2&gt;&amp;1; babel-node $file"</span>]</span><br><span class="line">    </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>3.通过<code>which node</code>命令获取node的安装目录，添加到对应的path属性上<br>4.保存为<code>babel.sublime-build</code><br>5.Tools &gt; Build System，选择刚才创建的<code>babel</code><br>6.打开js文件，<code>cmd</code> + <code>b</code></p>
<p>但是你如果安装的是babel6.x版本，弄完上面那一套，你会发现和选择node编译运行，并没有什么区别，该不支持的特性还是不支持，原因就像上面说的babel6.x中单独分离出来的命令行工具babel-cli仅仅提供一些全局的命令，要想完成编译，还需要本地安装所需的插件（全局安装插件也没用的）。接下来有一个新的问题，需要安装哪些插件，介绍一个简单的方法，可以通过在.babelrc中添加preset属性来指定一个插件的集合，如下所示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"presets"</span>: [<span class="string">"es2015"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在.babelrc所在目录中执行以下命令安装插件集</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install babel-preset-es2015</span><br></pre></td></tr></table></figure>
<p>其他插件集可以参考<a href="https://www.npmjs.com/search?q=babel-preset" target="_blank" rel="external">npm</a></p>
<p>在.babelrc所在目录下新建js文件，输入代码后<code>cmd</code> + <code>b</code>，即可对es6语法的代码进行编译。<br><img src="/images/es6InSublime/3.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ECMAScript 6是JavaScript语言的下一代标准，已经在2015年6月正式发布了。那么我们如何学习测试ES6新提出的那些特性呢，是写一个带有javascript的html文件在浏览器里运行下或者在浏览器的控制台输入js代码么？显然不靠谱啊，浏览器对新标准的支持总是滞后的。我知道，你想说还有node，babel呢，但是通过终端的REPL或者执行babel的编译命令查看运行结果，还是很麻烦嘛，还好，我们还可以通过sublime打造我们的js编译运行环境。</p>]]>
    
    </summary>
    
      <category term="ES6" scheme="http://fedvic.com/tags/ES6/"/>
    
      <category term="babel" scheme="http://fedvic.com/tags/babel/"/>
    
      <category term="sublime" scheme="http://fedvic.com/tags/sublime/"/>
    
      <category term="ES6" scheme="http://fedvic.com/categories/ES6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[让textarea高度随输入自适应]]></title>
    <link href="http://fedvic.com/2015/11/29/textareaAutosize/"/>
    <id>http://fedvic.com/2015/11/29/textareaAutosize/</id>
    <published>2015-11-29T09:56:23.000Z</published>
    <updated>2015-11-29T14:47:33.000Z</updated>
    <content type="html"><![CDATA[<p>让一个可编辑的div实现高度随输入自适应，很简单，只要设置下它的<code>min-height</code>就好了：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">contenteditable</span>=<span class="value">"true"</span> <span class="attribute">style</span>=<span class="value">"width:200px;min-height:100px;border:1px solid #e8e8e8"</span> &gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显然这招放在textarea上并不怎么管用，那么如何让一个textarea也做到像div一样的伸缩自如呢？</p>
<a id="more"></a>
<p>下面我将介绍3种通过js实现的方法，但是他们都依赖于对输入事件的监听，由于浏览器对其的支持不一，我曾在上一篇<a href="http://fedvic.com/2015/11/29/textChange/">博文</a>中专门讨论过这个问题，这里就不在赘述，直接拿出封装好的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bindTextChange = <span class="function"><span class="keyword">function</span> (<span class="params">selector, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $selector = $(selector);</span><br><span class="line">    <span class="keyword">var</span> _IE = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> v = <span class="number">3</span>,</span><br><span class="line">            div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>),</span><br><span class="line">            all = div.getElementsByTagName(<span class="string">'i'</span>);</span><br><span class="line">        <span class="keyword">while</span> (</span><br><span class="line">            div.innerHTML = <span class="string">'&lt;!--[if gt IE '</span> + (++v) + <span class="string">']&gt;&lt;i&gt;&lt;/i&gt;&lt;![endif]--&gt;'</span>,</span><br><span class="line">            all[<span class="number">0</span>]</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> v &gt; <span class="number">4</span> ? v : <span class="literal">false</span>;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_IE &amp;&amp; _IE &lt; <span class="number">9</span>) &#123;</span><br><span class="line">        $selector.on(<span class="string">'propertychange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">window</span>.event.propertyName === <span class="string">'value'</span> &amp;&amp; callback.call(<span class="keyword">this</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $selector.on(<span class="string">'input'</span>, callback);</span><br><span class="line">        <span class="keyword">if</span> (_IE === <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> callbackWrapper = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                callback.call($selector[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            $selector.on(<span class="string">'focus'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">document</span>.addEventListener(<span class="string">'selectionchange'</span>, callbackWrapper);</span><br><span class="line">            &#125;).on(<span class="string">'blur'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">document</span>.removeEventListener(<span class="string">'selectionchange'</span>, callbackWrapper);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u501F_u52A9_u9690_u85CF_u7684textarea_u7684_u6EDA_u52A8_u6761_u9AD8_u5EA6"><a href="#u501F_u52A9_u9690_u85CF_u7684textarea_u7684_u6EDA_u52A8_u6761_u9AD8_u5EA6" class="headerlink" title="借助隐藏的textarea的滚动条高度"></a>借助隐藏的textarea的滚动条高度</h3><p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">textarea</span> <span class="attribute">id</span>=<span class="value">"text"</span>&gt;</span><span class="tag">&lt;/<span class="title">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">textarea</span> <span class="attribute">id</span>=<span class="value">"shadow"</span>&gt;</span><span class="tag">&lt;/<span class="title">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="id">#container</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="tag">textarea</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">min-height</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>; <span class="comment">/* 隐藏IE滚动条 */</span></span><br><span class="line">&#125;</span></span><br><span class="line"><span class="id">#shadow</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">visibility</span>:<span class="value"> hidden</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>javascript</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $shadow = $(<span class="string">'#shadow'</span>);</span><br><span class="line"><span class="keyword">var</span> paddingTop = <span class="built_in">parseFloat</span>($shadow.css(<span class="string">'padding-top'</span>));</span><br><span class="line"><span class="keyword">var</span> paddingBottom = <span class="built_in">parseFloat</span>($shadow.css(<span class="string">'padding-bottom'</span>));</span><br><span class="line">bindTextChange(<span class="string">'#text'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>);</span><br><span class="line">    $shadow.val($<span class="keyword">this</span>.val());</span><br><span class="line">    $<span class="keyword">this</span>.height($shadow[<span class="number">0</span>].scrollHeight - paddingTop - paddingBottom);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>实现的原理是增加一个<code>visibility: hidden;</code>的textarea，再通过绝对定位和我们进行输入的textarea重合在一起，通过监听输入事件，将此时显示的textarea中的内容拷贝到隐藏的textarea中，此时隐藏的textarea出现滚动条，接下来将这个滚动条高度设置给显示的textarea的高度，就可以实现自适应高度了，这里面要注意两个问题：</p>
<ol>
<li>隐藏的textarea滚动条的高度，需要减掉上下padding，再赋值给显示的textarea的高度，如果不设置，第一次输入的时候，textarea会突然变长一小块</li>
<li>需要为textarea设置<code>min-height</code>，值同<code>height</code>相同即可，如果不设置，ie8中textarea在输入后，会立刻变成单行文本的高度</li>
</ol>
<h3 id="u501F_u52A9_u81EA_u8EAB_u7684_u6EDA_u52A8_u6761_u9AD8_u5EA6"><a href="#u501F_u52A9_u81EA_u8EAB_u7684_u6EDA_u52A8_u6761_u9AD8_u5EA6" class="headerlink" title="借助自身的滚动条高度"></a>借助自身的滚动条高度</h3><p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">textarea</span>&gt;</span><span class="tag">&lt;/<span class="title">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="tag">textarea</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">min-height</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>javascript</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $textarea = $(<span class="string">'textarea'</span>);</span><br><span class="line"><span class="keyword">var</span> paddingTop = <span class="built_in">parseFloat</span>($textarea.css(<span class="string">'padding-top'</span>));</span><br><span class="line"><span class="keyword">var</span> paddingBottom = <span class="built_in">parseFloat</span>($textarea.css(<span class="string">'padding-bottom'</span>));</span><br><span class="line"><span class="keyword">var</span> minHeight = <span class="built_in">parseFloat</span>($textarea.css(<span class="string">'min-height'</span>));</span><br><span class="line">bindTextChange(<span class="string">'textarea'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).height(minHeight).height(<span class="keyword">this</span>.scrollHeight - paddingTop - paddingBottom);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>其实这种方法实现的原理和第一种方法基本是一致的，都是根据textarea的<code>scrollHeight</code>来设置<code>height</code>以达到高度自适应的效果，不同的是这种方法不需要新增一个textarea，而是先将自己的高度设置为最小高度，获得此时滚动条的高度，再根据它设置高度。</p>
<h3 id="u501F_u52A9_u9690_u85CF_u7684pre_u6807_u7B7E"><a href="#u501F_u52A9_u9690_u85CF_u7684pre_u6807_u7B7E" class="headerlink" title="借助隐藏的pre标签"></a>借助隐藏的pre标签</h3><p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">pre</span>&gt;</span><span class="tag">&lt;<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;<span class="title">br</span>&gt;</span><span class="tag">&lt;/<span class="title">pre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">textarea</span>&gt;</span><span class="tag">&lt;/<span class="title">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="tag">div</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200px</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="tag">pre</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">min-height</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">visibility</span>:<span class="value"> hidden</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="tag">textarea</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>javascript</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $span = $(<span class="string">'pre span'</span>);</span><br><span class="line">bindTextChange(<span class="string">'textarea'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $span.html($(<span class="keyword">this</span>).val());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这个方法借助特定的html结构巧妙的实现了textarea自适应高度。为textarea包裹一层父元素，同时设置它为绝对定位并且height为100%，再在父元素下添加一个pre标签，这些的结构可以通过改变pre标签的高度来改变父元素的高度从而间接改变textarea的高度,为什么偏偏要用pre标签，那是因为pre标签可以保留换行符，因此我们只要监听textarea的文本变化，并将文本值设置给pre标签即可，那为什么还有一个<code>&lt;br&gt;</code>，那是因为要预先保留一行，如果没有它，在增大textarea高度的时候会出现第一行文本先隐藏再出现的Bug。<br>另外这种方法只支持IE9以上的版本。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>让一个可编辑的div实现高度随输入自适应，很简单，只要设置下它的<code>min-height</code>就好了：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">contenteditable</span>=<span class="value">"true"</span> <span class="attribute">style</span>=<span class="value">"width:200px;min-height:100px;border:1px solid #e8e8e8"</span> &gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显然这招放在textarea上并不怎么管用，那么如何让一个textarea也做到像div一样的伸缩自如呢？</p>]]>
    
    </summary>
    
      <category term="textarea" scheme="http://fedvic.com/tags/textarea/"/>
    
      <category term="高度自适应" scheme="http://fedvic.com/tags/%E9%AB%98%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94/"/>
    
      <category term="DOM" scheme="http://fedvic.com/categories/DOM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[跨浏览器监听用户输入]]></title>
    <link href="http://fedvic.com/2015/11/28/textChange/"/>
    <id>http://fedvic.com/2015/11/28/textChange/</id>
    <published>2015-11-28T00:38:19.000Z</published>
    <updated>2015-11-29T14:44:11.000Z</updated>
    <content type="html"><![CDATA[<p>在前端的开发中，我们经常面临着这样的需求，需要统计在<code>input[type=text]</code>或者<code>textarea</code>中用户输入的字数，以便给用户一些输入限制的提示，那么我们如何实现跨浏览器的监听用户在文本框的输入呢？</p>
<a id="more"></a>
<p>比如我们有如下的html结构，需要将用户在<code>#textbox</code>中输入的字数显示在<code>#counter</code>中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">textarea</span> <span class="attribute">id</span>=<span class="value">"textbox"</span>&gt;</span><span class="tag">&lt;/<span class="title">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"counter"</span>&gt;</span>0<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>先让我们看一下都有哪些方法可以监听用户的输入？</p>
<h2 id="change_u4E8B_u4EF6"><a href="#change_u4E8B_u4EF6" class="headerlink" title="change事件"></a>change事件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $counter = $(<span class="string">'#counter'</span>);</span><br><span class="line">$(<span class="string">'#textbox'</span>).on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $counter.text($(<span class="keyword">this</span>).val().length);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>chang事件是表单元素非常常用的一个事件了，被用来监听表单元素值的变化，但是在<code>input[type=text]</code>和<code>textarea</code>中监听用户输入，却有一个很大的限制，那就是它只有在焦点离开文本框的时候，才会触发，可是这样的用户体验并不能称之为好，我们往往需要的是实时监听。</p>
<h2 id="keydown_u4E8B_u4EF6/keyup_u4E8B_u4EF6"><a href="#keydown_u4E8B_u4EF6/keyup_u4E8B_u4EF6" class="headerlink" title="keydown事件/keyup事件"></a>keydown事件/keyup事件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $counter = $(<span class="string">'#counter'</span>);</span><br><span class="line">$(<span class="string">'#textbox'</span>).on(<span class="string">'keydown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $counter.text($(<span class="keyword">this</span>).val().length);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>keydown事件和keyup事件差不多，都是监听用户在键盘按键的事件，区别在于前者在按下时触发，后者在抬起时触发，对于我们的应用场景，显然keydown的体验要好些。但是它的问题在于不能监听到用户所有的输入方式，比如在文本框点击鼠标右键弹出菜单的剪贴，删除，撤销选项。</p>
<h2 id="input_u4E8B_u4EF6/propertychange_u4E8B_u4EF6"><a href="#input_u4E8B_u4EF6/propertychange_u4E8B_u4EF6" class="headerlink" title="input事件/propertychange事件"></a>input事件/propertychange事件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $counter = $(<span class="string">'#counter'</span>);</span><br><span class="line">$(<span class="string">'#textbox'</span>).on(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $counter.text($(<span class="keyword">this</span>).val().length);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>input事件是HTML5新增加的事件，用于监听用户输入，它可以完美的监听到用户按键输入或者右键菜单的操作，但是同样的它并不支持IE8及其以下版本，但是在IE的低版本中我们可以通过监听propertychange事件达到同样的效果，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $counter = $(<span class="string">'#counter'</span>);</span><br><span class="line">$(<span class="string">'#textbox'</span>).on(<span class="string">'propertychange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.event.propertyName === <span class="string">'value'</span> &amp;&amp; $counter.text($(<span class="keyword">this</span>).val().length);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>以为两个事件都监听就完事大吉了，不幸的是，IE9虽然两个事件都支持，但是却同样有一个Bug，无法监听到任何文字减少相关输入的操作，包括按退格键，选中一段文字按delete键或者右键菜单删除，选中一段文字<code>Ctrl+X</code>剪切或者右键菜单剪贴，<code>Ctrl+Z</code>撤销刚才的输入或者右键菜单撤销，我就这个问题，还去<a href="http://www.zhihu.com/question/31167279" target="_blank" rel="external">知乎提问过</a>，当时觉得可能除了设置定时器循环查看，也没有什么好的办法了，前一阵子在stackoverfollow偶然看到了这个问题的解决办法，现在将兼容IE9监听用户输入的方案分享在这里：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $textbox = $(<span class="string">'#textbox'</span>);</span><br><span class="line"><span class="keyword">var</span> $counter = $(<span class="string">'#counter'</span>);</span><br><span class="line">$textbox.on(<span class="string">'input'</span>, textChange).on(<span class="string">'focus'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'selectionchange'</span>, textChange);</span><br><span class="line">&#125;).on(<span class="string">'blur'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.removeEventListener(<span class="string">'selectionchange'</span>, textChange);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">textChange</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $counter.text($textbox.val().length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在IE9中删除文字会触发document的selectionchange事件，对此监听就相当于监听了删除文字相关操作的事件。</p>
<h3 id="u517C_u5BB9_u65B9_u6848"><a href="#u517C_u5BB9_u65B9_u6848" class="headerlink" title="兼容方案"></a>兼容方案</h3><p>最后的兼容代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $counter = $(<span class="string">'#counter'</span>);</span><br><span class="line"><span class="keyword">var</span> $textbox = $(<span class="string">'#textbox'</span>);</span><br><span class="line"><span class="keyword">var</span> textChange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $counter.text($textbox.val().length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> _IE = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v = <span class="number">3</span>,</span><br><span class="line">        div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>),</span><br><span class="line">        all = div.getElementsByTagName(<span class="string">'i'</span>);</span><br><span class="line">    <span class="keyword">while</span> (</span><br><span class="line">        div.innerHTML = <span class="string">'&lt;!--[if gt IE '</span> + (++v) + <span class="string">']&gt;&lt;i&gt;&lt;/i&gt;&lt;![endif]--&gt;'</span>,</span><br><span class="line">        all[<span class="number">0</span>]</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> v &gt; <span class="number">4</span> ? v : <span class="literal">false</span>;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (_IE &amp;&amp; _IE &lt; <span class="number">9</span>) &#123;</span><br><span class="line">    $textbox.on(<span class="string">'propertychange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.event.propertyName === <span class="string">'value'</span> &amp;&amp; textChange();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $textbox.on(<span class="string">'input'</span>, textChange);</span><br><span class="line">    <span class="keyword">if</span> (_IE === <span class="number">9</span>) &#123;</span><br><span class="line">        $textbox.on(<span class="string">'focus'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.addEventListener(<span class="string">'selectionchange'</span>, textChange);</span><br><span class="line">        &#125;).on(<span class="string">'blur'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.removeEventListener(<span class="string">'selectionchange'</span>, textChange);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>在前端的开发中，我们经常面临着这样的需求，需要统计在<code>input[type=text]</code>或者<code>textarea</code>中用户输入的字数，以便给用户一些输入限制的提示，那么我们如何实现跨浏览器的监听用户在文本框的输入呢？</p>]]>
    
    </summary>
    
      <category term="文本变化" scheme="http://fedvic.com/tags/%E6%96%87%E6%9C%AC%E5%8F%98%E5%8C%96/"/>
    
      <category term="浏览器兼容" scheme="http://fedvic.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9/"/>
    
      <category term="浏览器兼容" scheme="http://fedvic.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于input[type=file]那些事：如何本地预览图片]]></title>
    <link href="http://fedvic.com/2015/11/18/inputfile/nativePreview/"/>
    <id>http://fedvic.com/2015/11/18/inputfile/nativePreview/</id>
    <published>2015-11-18T12:30:00.000Z</published>
    <updated>2015-11-28T00:27:17.000Z</updated>
    <content type="html"><![CDATA[<p>在浏览器中怎样能看到自己刚通过<code>input[type=file]</code>选中的图片文件呢，一般的做法，是将图片文件异步上传到服务器，获取它在服务器的url，再将这个url赋值给一个img元素的src属性来实现的，这种做法往往会在服务器端产生大量的临时资源，而且还浪费了流量。那么如何不借助服务器，在本地实现图片的预览功能呢？对于现代浏览器，我们可以使用HTML5的File API，而对于不支持它们的IE9及其以下版本我们可以借助IE的滤镜来实现。</p>
<a id="more"></a>
<h2 id="u5982_u4F55_u672C_u5730_u9884_u89C8_u56FE_u7247"><a href="#u5982_u4F55_u672C_u5730_u9884_u89C8_u56FE_u7247" class="headerlink" title="如何本地预览图片"></a>如何本地预览图片</h2><h3 id="HTML5_File_API"><a href="#HTML5_File_API" class="headerlink" title="HTML5 File API"></a>HTML5 File API</h3><p>实现说起来也很简单，通过FileReader对象的readAsDataURL()方法，将图片文件转化为base64字符串，再将其赋值给img的src属性，即可实现图片文件的预览，另外我们可以通过监听img元素的onload事件，来获得图片文件的实际大小。浏览器的支持情况可以参考<a href="http://caniuse.com/#feat=fileapi" target="_blank" rel="external">这里</a>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span><br><span class="line">        <span class="class">.preview-container</span> <span class="rules">&#123;</span><br><span class="line">            <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">            <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200px</span></span></span>;</span><br><span class="line">            <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">200px</span></span></span>;</span><br><span class="line">            <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#eee</span></span></span>;</span><br><span class="line">        &#125;</span></span><br><span class="line">        <span class="class">.preview-container</span> <span class="tag">img</span> <span class="rules">&#123;</span><br><span class="line">            <span class="rule"><span class="attribute">display</span>:<span class="value"> none</span></span>;</span><br><span class="line">            <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">        &#125;</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"file"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"preview-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">img</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://cdn.bootcss.com/jquery/1.11.3/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">        <span class="keyword">var</span> previewrWidth = <span class="number">200</span>;</span><br><span class="line">        <span class="keyword">var</span> previewrHeight = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> $img = $(<span class="string">'img'</span>);</span><br><span class="line">        $(<span class="string">'input[type=file]'</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">            reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                $img.prop(<span class="string">'src'</span>, e.target.result);</span><br><span class="line">            &#125;</span><br><span class="line">            reader.readAsDataURL(<span class="keyword">this</span>.files[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">            $(<span class="string">'img'</span>).load(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> size = autoSize(<span class="keyword">this</span>.naturalWidth, <span class="keyword">this</span>.naturalHeight);</span><br><span class="line">                $(<span class="keyword">this</span>).css(&#123;</span><br><span class="line">                    width: size.width,</span><br><span class="line">                    height: size.height,</span><br><span class="line">                    top: (previewrHeight - size.height) / <span class="number">2</span>,</span><br><span class="line">                    left: (previewrWidth - size.width) / <span class="number">2</span></span><br><span class="line">                &#125;).show();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">autoSize</span>(<span class="params">width, height</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> scale = width / height;</span><br><span class="line">            <span class="keyword">if</span> (scale &gt;= previewrWidth / previewrHeight) &#123;</span><br><span class="line">                height = previewrWidth / scale;</span><br><span class="line">                width = previewrWidth;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                width = previewrHeight * scale;</span><br><span class="line">                height = previewrHeight;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                width: width,</span><br><span class="line">                height: height</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="IE_Filter"><a href="#IE_Filter" class="headerlink" title="IE Filter"></a>IE Filter</h3><p>对于IE9及其以下版本我们可以通过IE的滤镜来实现同样的功能，首先通过选中<code>input[type=file]</code>的文本区域来获取选中文件的本地路径，再将其赋值给div元素的filter，即可实现本地预览，但是为了获得图片文件的实际宽高，我们还需要一个额外的img元素，通过设置它的filter来获取。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span><br><span class="line">        <span class="class">.preview-container</span> <span class="rules">&#123;</span><br><span class="line">            <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">            <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200px</span></span></span>;</span><br><span class="line">            <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">200px</span></span></span>;</span><br><span class="line">            <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#eee</span></span></span>;</span><br><span class="line">        &#125;</span></span><br><span class="line">        <span class="class">.preview-container</span> <span class="class">.preview</span> <span class="rules">&#123;</span><br><span class="line">            <span class="rule"><span class="attribute">display</span>:<span class="value"> none</span></span>;</span><br><span class="line">            <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">        &#125;</span></span><br><span class="line">        <span class="class">.preview-container</span> <span class="class">.fake</span> <span class="rules">&#123;</span><br><span class="line">            <span class="rule"><span class="attribute">filter</span>:<span class="value"> progid:DXImageTransform.Microsoft.<span class="function">AlphaImageLoader</span>(sizingMethod=image)</span></span>;</span><br><span class="line">        &#125;</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"file"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"preview-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"preview"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">img</span> <span class="attribute">class</span>=<span class="value">"fake"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://cdn.bootcss.com/jquery/1.11.3/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">        <span class="keyword">var</span> previewrWidth = <span class="number">200</span>;</span><br><span class="line">        <span class="keyword">var</span> previewrHeight = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> $img = $(<span class="string">'.preview'</span>);</span><br><span class="line">        <span class="keyword">var</span> $fakeImg = $(<span class="string">'.fake'</span>);</span><br><span class="line">        $(<span class="string">'input[type=file]'</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.select();</span><br><span class="line">            <span class="keyword">this</span>.blur();</span><br><span class="line">            <span class="keyword">var</span> src = <span class="built_in">document</span>.selection.createRange().text;</span><br><span class="line"></span><br><span class="line">            $fakeImg.show();</span><br><span class="line">            <span class="keyword">var</span> fakeImg = $fakeImg[<span class="number">0</span>];</span><br><span class="line">            fakeImg.filters.item(<span class="string">'DXImageTransform.Microsoft.AlphaImageLoader'</span>).src = src;</span><br><span class="line">            <span class="keyword">var</span> size = autoSize(fakeImg.offsetWidth, fakeImg.offsetHeight);</span><br><span class="line">            $fakeImg.hide();</span><br><span class="line"></span><br><span class="line">            $img.css(&#123;</span><br><span class="line">                width: size.width,</span><br><span class="line">                height: size.height,</span><br><span class="line">                top: (previewrHeight - size.height) / <span class="number">2</span>,</span><br><span class="line">                left: (previewrWidth - size.width) / <span class="number">2</span>,</span><br><span class="line">                filter: <span class="string">'progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod=scale,src="'</span> + src + <span class="string">'"'</span></span><br><span class="line">            &#125;).show();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">autoSize</span>(<span class="params">width, height</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> scale = width / height;</span><br><span class="line">            <span class="keyword">if</span> (scale &gt;= previewrWidth / previewrHeight) &#123;</span><br><span class="line">                height = previewrWidth / scale;</span><br><span class="line">                width = previewrWidth;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                width = previewrHeight * scale;</span><br><span class="line">                height = previewrHeight;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                width: width,</span><br><span class="line">                height: height</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>在浏览器中怎样能看到自己刚通过<code>input[type=file]</code>选中的图片文件呢，一般的做法，是将图片文件异步上传到服务器，获取它在服务器的url，再将这个url赋值给一个img元素的src属性来实现的，这种做法往往会在服务器端产生大量的临时资源，而且还浪费了流量。那么如何不借助服务器，在本地实现图片的预览功能呢？对于现代浏览器，我们可以使用HTML5的File API，而对于不支持它们的IE9及其以下版本我们可以借助IE的滤镜来实现。</p>]]>
    
    </summary>
    
      <category term="input[type=file]" scheme="http://fedvic.com/tags/input-type-file/"/>
    
      <category term="浏览器兼容" scheme="http://fedvic.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9/"/>
    
      <category term="浏览器兼容" scheme="http://fedvic.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于input[type=file]那些事：如何异步上传文件]]></title>
    <link href="http://fedvic.com/2015/11/17/inputfile/uploadFile/"/>
    <id>http://fedvic.com/2015/11/17/inputfile/uploadFile/</id>
    <published>2015-11-17T13:26:54.000Z</published>
    <updated>2015-11-17T14:25:47.000Z</updated>
    <content type="html"><![CDATA[<p>我们都知道可以通过ajax请求来异步向服务器提交表单，那是不是其中也包括<code>input[type=file]</code>这个特殊的表单元素呢？如果不可以，那除了flash外，还有没有其他的方法可以实现异步提交文件呢？</p>
<a id="more"></a>
<h2 id="u5982_u4F55_u5F02_u6B65_u4E0A_u4F20_u6587_u4EF6"><a href="#u5982_u4F55_u5F02_u6B65_u4E0A_u4F20_u6587_u4EF6" class="headerlink" title="如何异步上传文件"></a>如何异步上传文件</h2><p>很不幸地，如果只是使用平常我们用的XMLHttpRequest是不行的，因为它并不支持二进制文件的传输，但是注意，我说的是我们平常用的，也就是说还有我们很少用的或者说还未用的，那就是<a href="http://dev.w3.org/2006/webapi/XMLHttpRequest-2/" target="_blank" rel="external">XmlHttpRequest Level 2</a>，它是XMLHttpRequest的新版本，增加了请求时限，文件传输，跨域请求，进度事件等等新的特性。<br>下面就是一个简单的利用这些新特性实现的文件异步上传的例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"file"</span> <span class="attribute">name</span>=<span class="value">"file"</span> <span class="attribute">type</span>=<span class="value">"file"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"btn"</span> <span class="attribute">type</span>=<span class="value">"button"</span>&gt;</span>Upload<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://cdn.bootcss.com/jquery/1.11.3/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">        <span class="keyword">var</span> $file = $(<span class="string">'#file'</span>);</span><br><span class="line">        $(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> data = <span class="keyword">new</span> FormData();</span><br><span class="line">            data.append(<span class="string">'file'</span>, $file[<span class="number">0</span>].files[<span class="number">0</span>]);</span><br><span class="line">            data.append(<span class="string">'foo'</span>, <span class="string">'bar'</span>);</span><br><span class="line">			  </span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            xhr.open(<span class="string">'post'</span>, <span class="string">'/upload'</span>);</span><br><span class="line">            xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                alert(e.currentTarget.response);</span><br><span class="line">            &#125;</span><br><span class="line">            xhr.send(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>唯一令人遗憾的就是，<a href="http://caniuse.com/#search=FormData" target="_blank" rel="external">IE9及其以下版本并不支持这些新特性</a>，如果又想兼容IE的低版本怎么办？还好我们可以通过iframe来模拟实现，具体做法就是将<code>input[type=file]</code>包裹上一层<code>&lt;form&gt;</code>，并将它的target属性指向一个隐藏的iframe，通过提交form表单来模拟文件的异步上传，可以参考下面的代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"file"</span> <span class="attribute">name</span>=<span class="value">"file"</span> <span class="attribute">type</span>=<span class="value">"file"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"btn"</span> <span class="attribute">type</span>=<span class="value">"button"</span>&gt;</span>Upload<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://cdn.bootcss.com/jquery/1.11.3/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">var</span> $file = $(<span class="string">'#file'</span>);</span><br><span class="line">        $(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            upload(&#123;</span><br><span class="line">                url: <span class="string">'/upload'</span>,</span><br><span class="line">                data: &#123;</span><br><span class="line">                    foo: <span class="string">'bar'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                callback: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(res);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> $iframe = $(<span class="string">'#uploaderFrame'</span>);</span><br><span class="line">            <span class="keyword">if</span> ($iframe.length === <span class="number">0</span>) &#123;</span><br><span class="line">                $iframe = $(<span class="string">'&lt;iframe id="uploaderFrame" name="uploaderFrame" style="display:none;"&gt;&lt;/iframe&gt;'</span>)</span><br><span class="line">                .appendTo(<span class="string">'body'</span>)</span><br><span class="line">                .load(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> response, responseStr = $(<span class="keyword">this</span>).contents().text();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        response = <span class="built_in">JSON</span>.parse(responseStr);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                        response = responseStr;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    $file.siblings().remove();</span><br><span class="line">                    $file.unwrap();</span><br><span class="line"></span><br><span class="line">                    opts.callback(response);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $file.wrap(<span class="string">'&lt;form action="'</span> + opts.url + <span class="string">'" method="post" enctype="multipart/form-data" target="uploaderFrame"&gt;&lt;/form&gt;'</span>);</span><br><span class="line">            <span class="keyword">var</span> $from = $file.parent();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> opts.data) &#123;</span><br><span class="line">                $from.append(<span class="string">'&lt;input type="hidden" name="'</span> + key + <span class="string">'" value="'</span> + opts.data[key] + <span class="string">'"&gt;'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $from.submit();</span><br><span class="line">        &#125;</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>另外像<a href="https://github.com/malsup/form" target="_blank" rel="external">jQuery.form.js</a>已经完成了对我上面所说的逻辑的封装，可以直接拿来使用。唯一需要注意的是，如果在IE中使用这种方法来异步提交文件，并且服务器返回的response header的<code>content-type</code>值为<code>application/json</code>，那么IE就会弹出下载json文件的提示，解决的办法是将<code>content-type</code>改为<code>text/html</code>，再在js中通过JSON.parse()转化为对象。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我们都知道可以通过ajax请求来异步向服务器提交表单，那是不是其中也包括<code>input[type=file]</code>这个特殊的表单元素呢？如果不可以，那除了flash外，还有没有其他的方法可以实现异步提交文件呢？</p>]]>
    
    </summary>
    
      <category term="input[type=file]" scheme="http://fedvic.com/tags/input-type-file/"/>
    
      <category term="浏览器兼容" scheme="http://fedvic.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9/"/>
    
      <category term="浏览器兼容" scheme="http://fedvic.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于input[type=file]那些事：如何清空值]]></title>
    <link href="http://fedvic.com/2015/11/16/inputfile/clearValue/"/>
    <id>http://fedvic.com/2015/11/16/inputfile/clearValue/</id>
    <published>2015-11-16T00:26:54.000Z</published>
    <updated>2015-11-29T02:57:08.000Z</updated>
    <content type="html"><![CDATA[<p>这又是一个容易想当然的问题，将<code>input[type=file]</code>的value设置为空就行了么？在chrome和firefox确实是没有问题的，但是在IE8/9/10中，然并卵（IE11没有这个问题）。</p>
<a id="more"></a>
<h2 id="u5982_u4F55_u6E05_u7A7A_u503C"><a href="#u5982_u4F55_u6E05_u7A7A_u503C" class="headerlink" title="如何清空值"></a>如何清空值</h2><p>网上比较常见的一种做法，就是在IE中通过清除<code>input[type=file]</code> 文本区域的文本来实现的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$inputFile.val(<span class="string">''</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.selection) &#123;</span><br><span class="line">  $inputFile.select();</span><br><span class="line">  <span class="built_in">document</span>.selection.clear();</span><br><span class="line">  $inputFile.blur();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是这种解决方案有3个问题：</p>
<ol>
<li>在IE中依然会触发它的change事件</li>
<li>对于<code>display:none;</code>的<code>input[type=file]</code>不起作用</li>
<li>在IE8中使用<a href="https://github.com/malsup/form" target="_blank" rel="external">jquery.form.js</a>，如果存在这种方式清空过值的<code>input[type=file]</code>，在提交的时候会报拒绝访问的错误，原因也是由于IE8出于安全的考虑，禁止通过代码手动修改<code>input[type=file]</code>的值</li>
</ol>
<p>这里推荐另一个巧妙的解决方案：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$inputFile.wrap(<span class="string">'&lt;form&gt;&lt;/form&gt;'</span>);</span><br><span class="line">$inputFile.parent()[<span class="number">0</span>].reset();</span><br><span class="line">$inputFile.unwrap();</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>这又是一个容易想当然的问题，将<code>input[type=file]</code>的value设置为空就行了么？在chrome和firefox确实是没有问题的，但是在IE8/9/10中，然并卵（IE11没有这个问题）。</p>]]>
    
    </summary>
    
      <category term="input[type=file]" scheme="http://fedvic.com/tags/input-type-file/"/>
    
      <category term="浏览器兼容" scheme="http://fedvic.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9/"/>
    
      <category term="浏览器兼容" scheme="http://fedvic.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于input[type=file]那些事：如何定制样式]]></title>
    <link href="http://fedvic.com/2015/11/15/inputfile/customCSS/"/>
    <id>http://fedvic.com/2015/11/15/inputfile/customCSS/</id>
    <published>2015-11-15T00:26:54.000Z</published>
    <updated>2015-11-29T02:57:07.000Z</updated>
    <content type="html"><![CDATA[<p><code>&lt;input type=&quot;file&quot;&gt;</code>由一个文本区域和一个浏览按钮组成，用于文件上传，是HTML表单元素中比较特殊的一个。由于涉及到向服务器上传文件这样敏感的安全问题，所以浏览器对其进行了诸多的限制，而且各家浏览器对其的支持也不尽相同，这给前端程序员的开发带来了很多麻烦。鉴于此，我准备写几篇关于<code>input[type=file]</code>的日常开发总结，希望能给大家带来帮助。</p>
<a id="more"></a>
<h2 id="u5982_u4F55_u5B9A_u5236_u6837_u5F0F"><a href="#u5982_u4F55_u5B9A_u5236_u6837_u5F0F" class="headerlink" title="如何定制样式"></a>如何定制样式</h2><p>首先，借用一张图来让我们来看下<code>input[type=file]</code>在各家浏览器千奇百怪的样子吧：</p>
<p><img src="/images/inputfile/fileInBrowsers.png" alt=""></p>
<p>这显然没有办法达到在不同浏览器相同体验的效果，好吧，那就让我们来定制一下我们自己的style吧，比如就是下面的这个简单效果：</p>
<p><img src="/images/inputfile/example.png" alt=""></p>
<p>但是当你准备开始写css时，你却又变得无从下手了，一个文本框＋一个按钮的这个控件样式怎么写呢，还想改变浏览按钮的文字怎么办呢，还好我们前端程序员总能机(ku)智(bi)想到各种神奇的办法解决这样的问题。</p>
<h3 id="u900F_u660E_u914D_u5408_u7EDD_u5BF9_u5B9A_u4F4D"><a href="#u900F_u660E_u914D_u5408_u7EDD_u5BF9_u5B9A_u4F4D" class="headerlink" title="透明配合绝对定位"></a>透明配合绝对定位</h3><p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"fileWrap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"file"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">type</span>=<span class="value">"button"</span>&gt;</span>浏览<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"fileName"</span>&gt;</span>请上传文件<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="class">.fileWrap</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.fileWrap</span> <span class="tag">input</span><span class="attr_selector">[type=file]</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">opacity</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">filter</span>:<span class="value"> <span class="function">alpha</span>(opacity=<span class="number">0</span>)</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">cursor</span>:<span class="value"> pointer</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.fileWrap</span> <span class="tag">button</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#fff</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#ddd</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.fileName</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>javascript</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $fileName = $(<span class="string">'.fileName'</span>);</span><br><span class="line">$(<span class="string">'input[type=file]'</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> path = $(<span class="keyword">this</span>).val();</span><br><span class="line">  <span class="keyword">var</span> fileName = path ? path.substr(path.lastIndexOf(<span class="string">'\\'</span>) + <span class="number">1</span>) : <span class="string">'请上传文件'</span>;</span><br><span class="line">  $fileName.text(fileName);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这是网上很常见的方法，原理就是将<code>input[type=file]</code>的透明度设置为0，同时在父元素中绝对定位，达到覆盖显示的可点击元素的目的，以上的代码放在chrome和firefox中完全没有问题，但是在IE8/9/10中却出现了两个问题：</p>
<ol>
<li>点击按钮的左侧后无法弹出文件选择框</li>
<li>按钮左侧出现光标</li>
</ol>
<p>就算在IE11中也有第二个问题，我们去掉对<code>input[type=file]</code>透明度css的设置，就会发现如下的情况：</p>
<p><img src="/images/inputfile/ie.png" alt=""></p>
<p>我们都知道<code>input[type=file]</code>包括一个文本区域和一个浏览按钮，在IE8/9/10中点击文本区域，是不会弹出文件选择框的，并且在所有的IE版本中即使将它设置为透明，依然会有光标的出现，要想解决这个问题，我们还要设置些额外的样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="class">.fileWrap</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.fileWrap</span> <span class="tag">input</span><span class="attr_selector">[type=file]</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">left</span>:<span class="value"> -<span class="number">10px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">110px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">opacity</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">filter</span>:<span class="value"> <span class="function">alpha</span>(opacity=<span class="number">0</span>)</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">cursor</span>:<span class="value"> pointer</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>将<code>input[type=file]</code>的<code>font-size</code>改为<code>100px</code>，可以让浏览按钮足够大来尽可能填充点击区域，但是依然会存在一小部分文本区域，那么我们通过设置<code>left</code>为负值以及增大相应<code>width</code>的方法，让浏览按钮填充整个点击区域。</p>
<h3 id="u9690_u85CF_u914D_u5408_u624B_u52A8_u89E6_u53D1click_u4E8B_u4EF6"><a href="#u9690_u85CF_u914D_u5408_u624B_u52A8_u89E6_u53D1click_u4E8B_u4EF6" class="headerlink" title="隐藏配合手动触发click事件"></a>隐藏配合手动触发click事件</h3><p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"fileWrap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"file"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">type</span>=<span class="value">"button"</span>&gt;</span>浏览<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"fileName"</span>&gt;</span>请上传文件<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="class">.fileWrap</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.fileWrap</span> <span class="tag">input</span><span class="attr_selector">[type=file]</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> none</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.fileWrap</span> <span class="tag">button</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#fff</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#ddd</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">outline</span>:<span class="value"> none</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">cursor</span>:<span class="value"> pointer</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.fileName</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>javascript</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $file = $(<span class="string">'input[type=file]'</span>);</span><br><span class="line"><span class="keyword">var</span> $fileName = $(<span class="string">'.fileName'</span>);</span><br><span class="line">$(<span class="string">'.fileWrap button'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $file.click();</span><br><span class="line">&#125;);</span><br><span class="line">$file.change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> path = $(<span class="keyword">this</span>).val();</span><br><span class="line">  <span class="keyword">var</span> fileName = path ? path.substr(path.lastIndexOf(<span class="string">'\\'</span>) + <span class="number">1</span>) : <span class="string">'请上传文件'</span>;</span><br><span class="line">  $fileName.text(fileName);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>原理其实很简单，就是通过手动触发隐藏的<code>input[type=&quot;file&quot;]</code>的click事件来弹出文件选择框，但是这种解决方案在IE8下有一个很致命的问题，通过<a href="https://github.com/malsup/form" target="_blank" rel="external">jquery.form.js</a>异步提交表单的时候，会报拒绝访问的错误，原因是IE8出于安全的考虑不允许提交手动触发过click事件的<code>input[type=file]</code>。</p>
<h3 id="label_u6807_u7B7E_u6A21_u62DF"><a href="#label_u6807_u7B7E_u6A21_u62DF" class="headerlink" title="label标签模拟"></a>label标签模拟</h3><p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">label</span> <span class="attribute">class</span>=<span class="value">"fileWrap"</span>&gt;</span>浏览</span><br><span class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"file"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"fileName"</span>&gt;</span>请上传文件<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="class">.fileWrap</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#ddd</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#fff</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">cursor</span>:<span class="value"> pointer</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.fileWrap</span> <span class="tag">input</span><span class="attr_selector">[type=file]</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"> -<span class="number">50px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.fileName</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>javascript</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $fileName = $(<span class="string">'.fileName'</span>);</span><br><span class="line">$(<span class="string">'input[type=file]'</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> path = $(<span class="keyword">this</span>).val();</span><br><span class="line">  <span class="keyword">var</span> fileName = path ? path.substr(path.lastIndexOf(<span class="string">'\\'</span>) + <span class="number">1</span>) : <span class="string">'请上传文件'</span>;</span><br><span class="line">  $fileName.text(fileName);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这种解决方案就很巧妙了，利用<code>label</code>标签和表单元素关联后，点击label标签就相当于点击了表单元素的特性，来弹出文件选择框，相较于前两种解决方案更简单兼容性也更好。这里要注意的一点是，<code>input[type=file]</code>的<code>display</code>属性不能为<code>none</code>，否则就不会起作用，考虑到设置<code>visiblity: hidden;</code>可能会影响页面其他元素的布局，这里我通过设置绝对定位在父元素之外，并且设置父元素<code>overflow: hidden;</code>来达到隐藏不显示的目的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><code>&lt;input type=&quot;file&quot;&gt;</code>由一个文本区域和一个浏览按钮组成，用于文件上传，是HTML表单元素中比较特殊的一个。由于涉及到向服务器上传文件这样敏感的安全问题，所以浏览器对其进行了诸多的限制，而且各家浏览器对其的支持也不尽相同，这给前端程序员的开发带来了很多麻烦。鉴于此，我准备写几篇关于<code>input[type=file]</code>的日常开发总结，希望能给大家带来帮助。</p>]]>
    
    </summary>
    
      <category term="input[type=file]" scheme="http://fedvic.com/tags/input-type-file/"/>
    
      <category term="浏览器兼容" scheme="http://fedvic.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9/"/>
    
      <category term="浏览器兼容" scheme="http://fedvic.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[［译］Building Command Line Tools in Node with Liftoff]]></title>
    <link href="http://fedvic.com/2015/11/14/liftoff/"/>
    <id>http://fedvic.com/2015/11/14/liftoff/</id>
    <published>2015-11-14T00:47:44.000Z</published>
    <updated>2015-11-29T02:57:06.000Z</updated>
    <content type="html"><![CDATA[<p>作者：<a href="https://bocoup.com/about/bocouper/tyler-kellen" target="_blank" rel="external">Tyler Kellen</a></p>
<p>原文：<a href="https://bocoup.com/weblog/building-command-line-tools-in-node-with-liftoff" target="_blank" rel="external">https://bocoup.com/weblog/building-command-line-tools-in-node-with-liftoff</a></p>
<p>前一阵子在研究前端构建工具时，在<a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">gulp</a>和<a href="http://fis.baidu.com/" target="_blank" rel="external">fis3</a>中都发现了<a href="https://www.npmjs.com/package/liftoff" target="_blank" rel="external">liftoff</a>的身影，国内关于这个模块的介绍资料很少，于是就起了翻译下模块作者这篇博文的念头。</p>
<a id="more"></a>
<h2 id="u8BD1_u6587"><a href="#u8BD1_u6587" class="headerlink" title="译文"></a>译文</h2><p>在node中编程，我最喜欢的一点就是包管理系统，在几乎所有的情况下，在每个项目安装本地模块的做法大大地简化了我作为一个开发者的工作。</p>
<p>然而，在长期作为Grunt项目一个贡献者的同时，我对某些特殊的使用情况越来越了解，这打破了我之前的想法。我创建了一个叫<a href="https://github.com/js-cli/js-liftoff" target="_blank" rel="external">Liftoff</a>的库去解决这个问题，希望能减少每个人关于这方面的烦恼。</p>
<p>如果你曾经开发过node的命令行工具，特别是某些需要插件的生态系统，那你就可能知道我讲的是什么。让我们看看<a href="https://github.com/js-cli/js-liftoff" target="_blank" rel="external">Liftoff</a>到底是解决什么问题的。</p>
<h3 id="u5168_u5C40_u6A21_u5757_u542B_u4E49"><a href="#u5168_u5C40_u6A21_u5757_u542B_u4E49" class="headerlink" title="全局模块含义"></a>全局模块含义</h3><p>在我深入介绍之前，先让我来解释一些事情来确保我们的思路是一致的。</p>
<ol>
<li>如果你想要一个模块提供一个在shell中使用的命令，最简单的方法就是全局安装它（<code>npm install -g modulename</code>），来让它在系统层面变得可用。</li>
<li>在不借助像<a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a>这样工具的情况下你不能全局安装一个模块的多个版本。</li>
<li>全局安装的模块不能够引入（<code>require</code>）其他全局安装的模块。</li>
<li>本地安装的模块不能够引入（<code>require</code>）全局安装的模块。</li>
</ol>
<p><strong>注意</strong>：所有的模块都能够访问全局安装的node的核心模块，像<code>fs</code>，<code>path</code>，<code>http</code>等。</p>
<h3 id="u8FD9_u610F_u5473_u7740_u4EC0_u4E48_uFF1F"><a href="#u8FD9_u610F_u5473_u7740_u4EC0_u4E48_uFF1F" class="headerlink" title="这意味着什么？"></a>这意味着什么？</h3><p>上面所介绍的全局模块的含义其实隐含了一些看起来不是很直观的问题：</p>
<ol>
<li>Node的命令行工具经常情况下全局本地都要安装。</li>
<li>全局安装的版本应该提供一个命令去找到并且加载本地安装的版本。</li>
<li>如果这个工具需要插件，一个本地安装的版本将不能访问任何全局安装的模块。插件需要被当作依赖特殊地安装在每一个项目下。</li>
</ol>
<p>如果你还是一个node的新手，这些可能会让你很困扰。我的建议？继续学习就好了，花费足够的时间，你就可以使用多个版本的工具和插件来构建项目了。</p>
<h3 id="u8BA9_u5168_u5C40_u5B89_u88C5_u548C_u672C_u5730_u5B89_u88C5_u53D8_u5F97_u6B63_u786E"><a href="#u8BA9_u5168_u5C40_u5B89_u88C5_u548C_u672C_u5730_u5B89_u88C5_u53D8_u5F97_u6B63_u786E" class="headerlink" title="让全局安装和本地安装变得正确"></a>让全局安装和本地安装变得正确</h3><p>为了方便讨论，让我们来开发一个叫<a href="http://github.com/tkellen/node-hacker" target="_blank" rel="external">hacker</a>的命令行工具，并且使用<code>Hackerfile</code>让他变得可配置。当我们在shell中运行<code>hacker</code>命令时，我们想让它在我们全局安装的版本中执行一个二进制文件（通过在我们工具的<code>package.json</code>文件的<a href="https://docs.npmjs.com/json#bin" target="_blank" rel="external">bin</a>属性指定）。就像刚才提到的，这个命令应该能发现并且加载一个我们<strong>本地</strong>安装的包，无论它是什么版本 。</p>
<p>因为全局安装的模块不能直接引入（<code>require</code>）本地安装的模块，要想让它运行起来，我们还得想点办法。值得庆幸的是，我们需要的解决方案在npm上已经有了。它叫<a href="https://github.com/substack/node-resolve" target="_blank" rel="external">resolve</a>，它通过一些方便的配置，包括指定一个基础的路径来开始搜素，再次实现了<a href="https://nodejs.org/api/modules.html#modules_all_together" target="_blank" rel="external">node是怎样寻找模块的</a>。</p>
<p>下面是到目前为止我们<code>hacker</code>这个可执行二进制文件的一个简单例子：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br><span class="line">var resolve = require('resolve');</span><br><span class="line">try &#123;</span><br><span class="line">  var localHacker = resolve.sync('hacker', &#123; basedir: process.cwd() &#125;);</span><br><span class="line">  console.log('Found hacker at', localHacker);</span><br><span class="line">  // kick off here</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">  console.log('Unable to find a local installation of hacker.');</span><br><span class="line">  process.exit(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u8BA9_u5B83_u8FD0_u884C_u5F97_u66F4_u597D"><a href="#u8BA9_u5B83_u8FD0_u884C_u5F97_u66F4_u597D" class="headerlink" title="让它运行得更好"></a>让它运行得更好</h3><p>现在我们能够找到并且运行我们tool的一个本地的版本了！我们已经做得很完美了，对么？不完全是，有许多细节有待完善，现在让我们来看看它们吧。</p>
<h4 id="u667A_u80FD_u5730_u904D_u5386_u67E5_u627E"><a href="#u667A_u80FD_u5730_u904D_u5386_u67E5_u627E" class="headerlink" title="智能地遍历查找"></a>智能地遍历查找</h4><p>当我们运行<code>hacker</code>命令时，我们可能是在我们项目的一个子目录中。如果我们的工具足够聪明以至于能够去遍历文件系统找到一个在最近的上级目录中的<code>Hackerfile</code>，那就太好了。又一次的，npm上已经有了一个解决这个问题的模块—它叫做<a href="https://github.com/cowboy/node-findup-sync" target="_blank" rel="external">findup-sync</a>，下面是我们如何来使用它：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br><span class="line">var resolve = require('resolve');</span><br><span class="line">var findup = require('findup-sync');</span><br><span class="line">var path = require('path');</span><br><span class="line">var cwd = process.cwd();</span><br><span class="line"></span><br><span class="line">var configFile = findup('Hackerfile.js', &#123; cwd: cwd &#125;);</span><br><span class="line">if (configFile) &#123;</span><br><span class="line">  console.log('Found Hackerfile:', configFile);</span><br><span class="line">  cwd = path.dirname(configFile);</span><br><span class="line">  process.chdir(cwd);</span><br><span class="line">  console.log('Setting current working directory:', cwd);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  console.log('No Hackerfile found.');</span><br><span class="line">  process.exit(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">  var localModule = resolve.sync('hacker', &#123; basedir: cwd &#125;);</span><br><span class="line">  if (localModule) &#123;</span><br><span class="line">    console.log('Found hacker module:', localModule);</span><br><span class="line">  &#125;</span><br><span class="line">  // kick off here</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">  console.log('Unable to find a local installation of hacker.');</span><br><span class="line">  process.exit(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意一旦找到了<code>Hackerfile</code>，我们会把当前进程的工作目录切换到它所在的目录中。通过这种方式，我们工具中执行任何的文件操作都是相对于我们的<code>Hackerfile</code>的。</p>
<h4 id="u660E_u786E_u5730_u6307_u5B9A_u76EE_u5F55"><a href="#u660E_u786E_u5730_u6307_u5B9A_u76EE_u5F55" class="headerlink" title="明确地指定目录"></a>明确地指定目录</h4><p>最终，我们可能需要在一个完全是我们项目目录之外的文件夹运行hacker命令。为了支持这个，我们需要开始去读取命令行的参数。我们立刻能想到许许多多的很棒的命令行参数的解析器<a href="https://github.com/substack/node-optimist" target="_blank" rel="external"> optimist</a>，<a href="https://github.com/substack/minimist" target="_blank" rel="external">minimist</a>，<a href="https://github.com/bcoe/yargs" target="_blank" rel="external"> yargs</a>，<a href="https://github.com/harthur/nomnom" target="_blank" rel="external">nomnom</a>，<a href="https://github.com/npm/nopt" target="_blank" rel="external">nopt</a>以及<a href="https://github.com/tj/commander.js" target="_blank" rel="external">commander.js</a>，我们没有必要去重新造一个！</p>
<p>下面是当我们支持一个<code>--cwd</code>参数时的可执行二进制文件的内容：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br><span class="line">var resolve = require('resolve');</span><br><span class="line">var findup = require('findup-sync');</span><br><span class="line">var path = require('path');</span><br><span class="line">var argv = require('minimist')(process.argv.slice(2));</span><br><span class="line"></span><br><span class="line">var cwd = argv.cwd ? argv.cwd : process.cwd();</span><br><span class="line"></span><br><span class="line">var configFile = findup('Hackerfile.js', &#123; cwd: cwd &#125;);</span><br><span class="line">if (configFile) &#123;</span><br><span class="line">  console.log('Found Hackerfile:', configFile);</span><br><span class="line">  cwd = path.dirname(configFile);</span><br><span class="line">  process.chdir(cwd);</span><br><span class="line">  console.log('Setting current working directory:', cwd);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  console.log('No Hackerfile found.');</span><br><span class="line">  process.exit(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">  var localModule = resolve.sync('hacker', &#123; basedir: cwd &#125;);</span><br><span class="line">  if (localModule) &#123;</span><br><span class="line">    console.log('Found hacker module:', localModule);</span><br><span class="line">  &#125;</span><br><span class="line">  // kick off here</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">  console.log('Unable to find a local installation of hacker.');</span><br><span class="line">  process.exit(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u914D_u7F6E_u652F_u6301js_u5F02_u6784_u8BED_u8A00"><a href="#u914D_u7F6E_u652F_u6301js_u5F02_u6784_u8BED_u8A00" class="headerlink" title="配置支持js异构语言"></a>配置支持js异构语言</h4><p>如果我们的工具得到了广泛的应用，一些人总是想通过一些我们没用过或者不关心的js异构语言来写他们自己的<code>HackerFile</code>。将它与我们的工具很明确地绑定在一起是一个很糟糕的主意，所以我们需要去支持另一个参数。让我们叫它<code>--require</code>。这是很棒的一件事，我们发现能够通过这个参数来解析和了解怎样去使用<a href="https://github.com/substack/node-resolve" target="_blank" rel="external">resolve</a>—我们需要找到更多的本地模块！</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br><span class="line">var resolve = require('resolve');</span><br><span class="line">var findup = require('findup-sync');</span><br><span class="line">var path = require('path');</span><br><span class="line">var argv = require('minimist')(process.argv.slice(2));</span><br><span class="line"></span><br><span class="line">var cwd = argv.cwd ? argv.cwd : process.cwd();</span><br><span class="line">var requires = argv.require;</span><br><span class="line"></span><br><span class="line">if (requires) &#123;</span><br><span class="line">  if (!Array.isArray(requires)) &#123;</span><br><span class="line">    requires = [requires];</span><br><span class="line">  &#125;</span><br><span class="line">  requires.forEach(function (module) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      require(resolve.sync(module, &#123; basedir: cwd &#125;));</span><br><span class="line">      console.log('Loading external module:', module);</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">      console.log('Unable to load:', module, e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var validExtensions = Object.keys(require.extensions).join(',');</span><br><span class="line">var configNameRegex = 'Hackerfile'+'&#123;'+validExtensions+'&#125;';</span><br><span class="line"></span><br><span class="line">var configFile = findup(configNameRegex, &#123; cwd: cwd &#125;);</span><br><span class="line">if (configFile) &#123;</span><br><span class="line">  console.log('Found Hackerfile:', configFile);</span><br><span class="line">  cwd = path.dirname(configFile);</span><br><span class="line">  process.chdir(cwd);</span><br><span class="line">  console.log('Setting current working directory:', cwd);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  console.log('No Hackerfile found.');</span><br><span class="line">  process.exit(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">  var localModule = resolve.sync('hacker', &#123; basedir: cwd &#125;);</span><br><span class="line">  if (localModule) &#123;</span><br><span class="line">    console.log('Found hacker module:', localModule);</span><br><span class="line">  &#125;</span><br><span class="line">  // kick off here</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">  console.log('Unable to find a local installation of hacker.');</span><br><span class="line">  process.exit(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在，代替去查找一个以<code>.js</code>作为后缀名的<code>Hackerfile</code>的是，我们会去查找任何一个能够被node知道如何去加载解析的文件类型。如果我们像这样调用我们的命令：<code>hacker --require coffee-script/register</code>，我们的可执行二进制文件将会尝试从我们的本地依赖中加载coffee-script的解析器。如果加载成功，node就能够成功加载以<code>.coffee</code>作为后缀名的文件。</p>
<h4 id="u8BA9_u4E00_u5207_u53D8_u5F97_u66F4_u7B80_u5355"><a href="#u8BA9_u4E00_u5207_u53D8_u5F97_u66F4_u7B80_u5355" class="headerlink" title="让一切变得更简单"></a>让一切变得更简单</h4><p>在<a href="https://github.com/js-cli/js-liftoff" target="_blank" rel="external">Liftoff</a>中所有的这一切都是自动的，下面的这个例子做了我到目前为止所说的所有事情：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br><span class="line">var Liftoff = require('liftoff');</span><br><span class="line"></span><br><span class="line">var Hacker = new Liftoff(&#123;</span><br><span class="line">  name: 'hacker'</span><br><span class="line">&#125;).on('require', function (name, module) &#123;</span><br><span class="line">  console.log('Loading external module:', name);</span><br><span class="line">&#125;).on('requireFail', function (name, err) &#123;</span><br><span class="line">  console.log('Unable to load:', name, err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Hacker.launch(function() &#123;</span><br><span class="line">  if(this.configPath) &#123;</span><br><span class="line">    process.chdir(this.configBase);</span><br><span class="line">    console.log('Setting current working directory:', this.configBase);</span><br><span class="line">    // kick off here</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    console.log('No Hackerfile found.');</span><br><span class="line">    process.exit(1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>下一个Grunt的主要版本（托管在<a href="https://github.com/gruntjs/grunt-next" target="_blank" rel="external">这里</a>）将会采用<a href="https://github.com/js-cli/js-liftoff" target="_blank" rel="external">Liftoff</a>。其他的库也开始使用它，<a href="http://gulpjs.com/" target="_blank" rel="external">Gulp</a>目前正在使用，<a href="https://github.com/mdevils/node-jscs" target="_blank" rel="external">jscs</a>也马上准备开始使用。我希望这个可重复使用的解决方案能够帮助其他的开发者去创建更好的工具！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>作者：<a href="https://bocoup.com/about/bocouper/tyler-kellen">Tyler Kellen</a></p>
<p>原文：<a href="https://bocoup.com/weblog/building-command-line-tools-in-node-with-liftoff">https://bocoup.com/weblog/building-command-line-tools-in-node-with-liftoff</a></p>
<p>前一阵子在研究前端构建工具时，在<a href="http://www.gulpjs.com.cn/">gulp</a>和<a href="http://fis.baidu.com/">fis3</a>中都发现了<a href="https://www.npmjs.com/package/liftoff">liftoff</a>的身影，国内关于这个模块的介绍资料很少，于是就起了翻译下模块作者这篇博文的念头。</p>]]>
    
    </summary>
    
      <category term="liftoff" scheme="http://fedvic.com/tags/liftoff/"/>
    
      <category term="node" scheme="http://fedvic.com/tags/node/"/>
    
      <category term="node" scheme="http://fedvic.com/categories/node/"/>
    
  </entry>
  
</feed>
